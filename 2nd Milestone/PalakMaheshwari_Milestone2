Milestone -2
------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array
class Solution {
public:
vector<int> searchRange(vector<int>& nums, int target) {
vector<int> V;
int first = -1, last = -1;
int n=nums.size();
for (int i = 0; i < n; i++) {
if (target != nums[i])
continue;
if (first == -1)
first = i;
last = i;
}
if (first != -1)
{
V.push_back(first);
V.push_back(last);
}
else{
V.push_back(-1);
V.push_back(-1);
}
return V;
}
};
Time Complexity : O(N)
Space Complexity : O(N)
-------------------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/find-the-duplicate-number
class Solution {
public:
int findDuplicate(vector<int>& nums) {
map<int,int> M;
int n=nums.size();
for(int i=0;i<n;i++)
{
M[nums[i]]++;
if(M[nums[i]]==2)
{
return nums[i];
break;
}
}
return -1;
}
};
Time Complexity :O(N)
Space Complexity :O(N)
-----------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/squares-of-a-sorted-array
class Solution {
public:
vector<int> sortedSquares(vector<int>& nums) {
vector<int> V;
int p;
for(int i=0;i<nums.size();i++)
{
V.push_back(pow(nums[i],2)); //storing the square of all the elements in the vector V
}
sort(V.begin(),V.end());
return V;
}
};
Time Complexity :O(N)
Space Complexity :O(N)
-----------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/maximum-ice-cream-bars
class Solution {
public:
int maxIceCream(vector<int>& costs, int coins) {
sort(costs.begin(),costs.end());
for (int i = 0; i < costs.size(); ++i)
if (coins >= costs[i]) //If the coin is greater than the cost of icecream
coins -= costs[i]; // we will substract the cost from the coins
else
return i;
return costs.size();
}
};
Time Complexity :O(N)
Space Complexity :O(1)
-----------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/longest-substring-without-repeating-characters
class Solution {
public:
int lengthOfLongestSubstring(string s) {
if(s.size()==0 || s.size()==1)
return s.size();
vector<int> arr(256, 0);
int ans = 0, start = 0;
for(int i=0; s[i]; i++) {
/* if the character has been seen before, increase the start variable until the count of current 'i' becomes 0*/
while(arr[s[i]] > 0) {
arr[s[start]]--;
start++;
}
arr[s[i]]++; /* increase the count so that we know we have seen this character before*/
ans = max(ans, i - start + 1); // Fetching the maximum so far
}
return ans;
}
};
Time Complexity :O(N)
Space Complexity :O(N)
-----------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/longest-consecutive-sequence
class Solution {
public:
int longestConsecutive(vector<int>& nums) {
map<int,int> M; // Solving it using map
int n=nums.size();
int count=0;
for(int i=0;i<n;i++)
{
M[nums[i]]++;
}
for(int i=0;i<n;i++){
if(M[i]!=0)
{
count++;
}
}
return count;
}
};//This solution is not covering the negative numbers
Time Complexity :O(N+N) =O(N)
Space Complexity :O(N)
-----------------------------------------------------------------------------------------------------------------------
https://leetcode.com/problems/majority-element
class Solution {
public:
int majorityElement(vector<int>& nums) {
map<int,int> M; //Solving it using map
int n=nums.size();
int ans =-1;
for(int i=0;i<n;i++)
{
M[nums[i]]++; // it will store the occurrence of digits in the array
if(M[nums[i]]>n/2) //if occurrence of a digit is more the n/2 then we have got our answer
{
ans= nums[i];
}
}
return ans;
}
};
Time Complexity : O(N)
Space Complexity :O(N)
-----------------------------------------------------------------------------------------------------------------------
